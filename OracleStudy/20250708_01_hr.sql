--▣ 접속된 사용자 확인
SELECT USER
FROM DUAL;
--==>>  HR

--▣ HR 계정 소유의 테이블 또는 뷰 목록 조회
SELECT *
FROM TAB;
/*

TNAME                          TABTYPE  CLUSTERID
------------------------------ ------- ----------
COUNTRIES                      TABLE             
DEPARTMENTS                    TABLE             
EMPLOYEES                      TABLE             
EMP_DETAILS_VIEW               VIEW              
JOBS                           TABLE             
JOB_HISTORY                    TABLE             
LOCATIONS                      TABLE             
REGIONS                        TABLE   
*/
-----------------------------------------------------------
--▣▣▣ 데이터베이스 정규화(Normalization)  ▣▣▣--
-- OOP: 나누고, 분리해서 설계
-- DB설계 단계에서 

--○ 정규화란?
--- 한 마디로 DB 서버의 『메모리 낭비를 막기 위해』
--- 어떤 하나의 테이블을 ... 『식별자』를 가지는 여러 개의 테이블로
--- 나누는 과정을 말한다.

--  ex) 김한국이... 옥장판을 판매한다.
--       고객리스트 -> 거래처직원 명단이 적혀있는 수첩의 정보를
--        DB화 하려고 한다.

--     테이블명 : 거래처직원
/*
 10-Byte   10-Byte    10-Byte      10-Byte      10-Byte  10-Byte   10-Byte   
---------------------------------------------------------------------------
거래처회사명 회사주소     회사전화    거래처직원명  직급     이메일       휴대폰
---------------------------------------------------------------------------
   LG      서울여의도  02-3456-7890  김한0        부장  AAA@gmail.com  010-12...
   LG      서울여의도  02-3456-7890  김한1        과장  AAA@gmail.com  010-77...
   LG      서울여의도  02-3456-7890  김한2        대장  AAA@gmail.com  010-91...
   LG      서울여의도  02-3456-7890  김한3        부장  AAA@gmail.com  010-48...
   SK      서울소곡동  02-3456-7890  김한4        부장  AAA@gmail.com  010-55...
   LG      부산동래구  02-3456-7890  김한5        부장  AAA@gmail.com  010-66...
                                       ：       
                                       ：
---------------------------------------------------------------------------
*/

/*
    가정)  서울여의도 LG(본사)라는 회사에 근무하는 거래처 직원 명단이
           총 100만 명이라고 가정한다.
           (한 행(레코드)은 70-Byte이다.)
           
           어느 날.... 『서울여의도』 에 위치한 LG본사가
           『경기분당』으로 사옥을 이전하게 되었다.
           이로 인해...
           회사주소는 『경기분당』 으로 바꾸고
           전화번호는 『031-1111-2222』로 바뀌게 되었다
 
           그러면,... 100만 명의 회사주소와 회사전화를 변경해야 한다.

           - 이 때 수행되어야 하는 쿼리문 --> UPDATE 구문

           UPDATE 거래처지원
           SET 회사주소='경기분당', 회사전화='031-1111-2222'
           WHERE 거래처화사명 = 'LG'
             AND 회사주소 = '서울여의도'

          --> 100만 개 행을 하드디스크상에서 읽어다가
          메모리에 로드시켜 주어야 한다.
          즉, 100만 * 70Byte를 모두
          하드디스크상에서 읽어다가 메모리에 로드시켜 주어야 한다는 말이다.

          --> 이는 테이블의 설계가 잘못되었으므로
          DB 서버는 조만간 메모리 고갈로 인해 DOWN될 것이다.

          --> 그러므로 이와 같은 상황을 막기 위해 정규화 과정을 수행해야 한다.
*/


--▣ 제 1 정규화
---   어떤 하나의 테이블에 반복되어 컬럼 값들이 존재한다면
---   값들이 반복되어 나오는 컬럼을 분리하여
---   새로운 테이블을 만들어준다.

---->>    제 1 정규화를 수행하는 과정에서 분리된 테이블은
---        반드시 부모 테이블과 자식 테이블의 관계를 갖게 된다.

---->>  제 1 정규화를 수행하는 과정에서
----    부모 테이블의 PRIMARY KEY는
----    항상 자식 테이블의 FOREIGN KEY 로 전이된다.

----    부모 테이블 → 참조받는 컬럼 → PRIMARY KEY(제약조건) 
----    자식 테이블 → 참조하는 컬럼 → FOREIGN KEY(제약조건) 
----    
---->>  참조받는 컬럼이 갖는 특징(부모 테이블)    
----    - 반드시 고유한 값(데이터)이 들어와야 한다.
----      즉, 중복된 값(데이터)이 없어야 한다.
----    - NULL 이어서는 안된다.(비어있어서는 안된다.)
----      즉, NOT NULL 이어야 한다.

---->>  참조하는 걸럼이 갖는 특징(자식 테이블)
----     - 부모 테이블의 참조받는 컬럼이 갖는 데이터들 중
----       하나인 데이터를 참조해야 한다.
----      
----      
----    
/*
 10-Byte   10-Byte    10-Byte        10-Byte      10-Byte  10-Byte   10-Byte   
---------------------------------------------------------------------------
거래처회사명 회사주소     회사전화     거래처직원명  직급     이메일       휴대폰
---------------------------------------------------------------------------
   LG      서울여의도  02-3456-7890  김한0        부장  AAA@gmail.com  010-12...
   LG      서울여의도  02-3456-7890  김한1        과장  AAA@gmail.com  010-77...
   LG      서울여의도  02-3456-7890  김한2        대장  AAA@gmail.com  010-91...
   LG      서울여의도  02-3456-7890  김한3        부장  AAA@gmail.com  010-48...
   SK      서울소곡동  02-3456-7890  김한4        부장  AAA@gmail.com  010-55...
   LG      부산동래구  02-3456-7890  김한5        부장  AAA@gmail.com  010-66...
                                       ：       


-- [테이블명 : 회사] → 부모 테이블
 10-Byte   10-Byte      10-Byte     10-Byte    
-------------------------------------------------------
 회사아이디  거래처회사명 회사주소     회사전화 
 ==========
 참조받는컬럼
-------------------------------------------------------
  10          LG      서울여의도  02-3456-7890
  20          SK      서울소곡동  02-3456-7890
  30          LG      부산동래구  02-3456-7890
                                             

-- [테이블명 : 직원] → 자식 테이블
 10-Byte      10-Byte  10-Byte   10-Byte   10-Byte   
-----------------------------------------------------------
   거래처직원명  직급     이메일     휴대폰   회사아이디
                                          ============
                                           참조하는 컬럼
-----------------------------------------------------------
 김한0        부장  AAA@gmail.com  010-12...     10
 김한1        과장  AAA@gmail.com  010-77...     10
 김한2        대장  AAA@gmail.com  010-91...     10
 김한3        부장  AAA@gmail.com  010-48...     10
 김한4        부장  AAA@gmail.com  010-55...     20
 김한5        부장  AAA@gmail.com  010-66...     30                                                                          ：
---------------------------------------------------------------------------
*/


--※ 테이블이 분할(분리)되기 이전 상태로 조회
/*
SELECT A.거래처회사명, A.회사주소, A.회사전화
      ,B.거래처직원명, B.직급, B.이메일, B.휴대폰
FROM 회사 A, 직원 B
WHERE A.회사아이디 = B.회사아이디;
*/
-- ==>> 원래의 상태로 조회하는데 이상 없음~!!!

/*
    가정)  서울여의도 LG(본사)라는 회사에 근무하는 거래처 직원 명단이
           총 100만 명이라고 가정한다.
        ------------------------------------------------------------
           어느 날.... 『서울여의도』 에 위치한 LG본사가
           『경기분당』으로 사옥을 이전하게 되었다.
           이로 인해...
           회사주소는 『경기분당』 으로 바꾸고
           전화번호는 『031-1111-2222』로 바뀌게 되었다
 
           그러면,... 회사 테이블에서 1건의 회사주소와 회사전화를 변경해야 한다.

           - 이 때 수행되어야 하는 쿼리문 --> UPDATE 구문

           UPDATE 회사
           SET 회사주소='경기분당', 회사전화='031-1111-2222'
           WHERE 회사아이디 = 10;

          --> 1 개 행을 하드디스크상에서 읽어다가
          메모리에 로드시켜 주어야 한다.
          즉, 1 * 40-Byte를 모두
          하드디스크상에서 읽어다가 메모리에 로드시켜 주어야 한다는 말이다.

          --> 이는 테이블의 설계가 잘 된 상황이다.
            --> 정규화를 수행하기 이전에는 100만 건을 처리해야 했던 업무에서
                1건만 처리하면 되는 업무로 바뀐 상황이기 때문에
                DB서버는 메모리 고갈없이 아주 빠르게 처리될 것이다.
*/

-- A. 거래처회사명, 회사전화
/*
----------------------------------------------------------------------------
정규화 이후                           |     정규화 이전
----------------------------------------------------------------------------
SELECT 거래처회사명, 회사전화          |   SELECT 거래처회사명, 회사전화       
FROM 회사;                            |   FROM 거래처직원;
→  3 * 40-Byte                       |    →  200만 * 70-Byte
----------------------------------------------------------------------------
*/

-- A. 거래처직원명, 직급
/*
----------------------------------------------------------------------------
정규화 이후                            |     정규화 이전
----------------------------------------------------------------------------
SELECT 거래처직원명, 직급              |   SELECT 거래처직원명, 직급       
FROM 직원;                            |   FROM 거래처직원;
→  200만 * 50-Byte                    |    →  200만 * 70-Byte
----------------------------------------------------------------------------
*/

-- A. 거래처회사명, 거래처직원명
/*
----------------------------------------------------------------------------
정규화 이후                           |     정규화 이전
----------------------------------------------------------------------------
SELECT 거래처직원명, 직급              |   SELECT 거래처직원명, 직급       
FROM 회사 A JOIN 직원 B;              |    FROM 거래처직원;
ON A.회사아이디 = B.회사아이디         |   
→  (회사)  + (직원) Full scan         |  
→ (3*40-Byte) + ( 200만 * 50-Byte)    |    →  200만 * 70-Byte
----------------------------------------------------------------------------
*/
--▣



--▣
-- ### --▣ --※ --○ ★ 『』 ? ▣ ◀▶ ▼ ▲ ⓐ ⓑ ① ② ③ ④ ⑤ ⑥ ⑦ ⑧ ⑨ ⑩  →   ←  ↓  …  ： º↑ /* */  ─ ┃ ┛┯ ┐┘ ￦
--/*▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼*/
--/*================[ 7월 XX일(금) ]========================*/

-----------------[ 강사님 풀이 - START ] ------------------------------
-----------------[  강사님 풀이 - END  ] ------------------------------

-----------------[ 실습 - START ] ----------------------------
-----------------[  실습 - END  ] ----------------------------
