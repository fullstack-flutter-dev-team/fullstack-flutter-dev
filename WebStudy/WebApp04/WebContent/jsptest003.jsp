<%@ page contentType="text/html; charset=UTF-8"%>

<%!
    // ○ 선언부(Declaration ) 영역 → 함수 정의가 가능한 영역

    // 선언부에서 선언한 변수 a
    int a = 10;

    // 선언부에서 정의한 함수 sum()
    int sum(int x) {
        int s=0;
        for (int i=1; i<=x;i++) {
            s += i;
        }
        
        return s;
    }

%>

<%
    // 스크립(트)릿(Scriptlet) 영역 -> JSP에서 JAVA 코드를 기술하는(사용하는) 영역

    // 스크립트릿에서 선언한 변수 b
    int b = 0;

    a++;
    b++;
%>

<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>jsptest003.jsp</title>
<link rel="stylesheet" type="text/css" href="css/main.css">
</head>
<body>
    <!-- 
    Servlet 컨테이너에 전달....?
    -->
    <div>
        <h1>JSP 관찰하기</h1>
        <hr>
    </div>

    <div>
        <!-- 표현식 -->
        <h2>변수의 값 확인</h2>
        <h3>a : <%=a %></h3>
        <h3>b : <%=b %></h3>
    </div>

    <div>
        <!-- 표현식 -->
        <h2>함수의 기능확인</h2>
        <h3><%=sum(100) %></h3>
    </div>

<!-- 
    ※ 요청한 페이지(jsptest003.jsp)의 결과를 확인한 후 
       클라이언트 브라우저에서 새로고침을 반복 수행하며 관찰해보면...
       a 변수(→ 선언부에서 선언한 변수) 값만 계속 증가하는 것을 확인할 수 있다.
       a 변수 값만 계속 증가하는 이유를 확인해보기 위해서는
       서블릿(servlet) 코드를 분석해 보아야 한다. 

       즉, jsptest003.jsp 의 서블릿으로 변환된 코드를 분석해야 한다.
-------------------------------------------------------------------
[경로]
...\WebStudy\.metadata\.plugins\org.eclipse.wst.server.core\tmp0\work\Catalina\localhost\WebApp04\org\apache\jsp\
-------------                                                                            ---------
[workspace]                                                                              [project]

[파일]
jsptest003_jsp.java
----------     -----
jsp파일명       서블릿(servlet)의 확장자 → 컴파일 이전  (→컴파일)  → jsptest003_jsp.class  

=>> 변수 a 는 클래스(jsptest003_jsp)의 전역변수로 선언된 것을 확인할 수 있다.
    이는 객체가 소멸되기 전까지는 계속 이 값이 유지된다는 것을 의미한다.
    변수 b 는 메서드(jsptest003_jsp 클래스의 _jspService())내의 지역변수로 선언된 것을 확인할 수 있다.
    이는 해당 메서드가 호출 될 때 마다 값이 갱신된다는 것을 의미한다.
    
    『_jspInit()』 메서드와 『_jspDestroy()』 메서드는 
    서비스가 시작될 때와 끝날 때 한 번씩만 실행되는(호출되는) 메서드이다.
    반면... 『_jspService()』 메서드는
    브라우저에 의해 페이지가 요청될 때 마다 매번 실행되는(호출되는) 메서드이다.
    
    이로 인해 변수 b는 페이지에 대한 요청이 발생할 때 마다
    새롭게 초기화 되는 과정을 거치게 되는 것이다.
    
    JSP 페이지의 스크립(트)릿 영역에서 선언된 모든 변수는
    이 『_jspService()』 메서드의 지역변수가 된다.
    
    또한, JSP 페이지의 선언부 영역에서 선언된 모든 변수는
    클래스의 전역변수(인스턴스 변수)가 된다.
    
    JSP 페이지의 메서드 정의 시
    스크립(트)릿 영역 내부에서는 정의할 수 없다.
    서블릿으로 변환되는 과정에서 메서드 내부에 또 다른 메서드가 정의되는 상황이
    되어버리기 때문에 문법적으로 잘못된 표현이 되는 것이다.
    
    ★★★
    선언부(Declaration)는...
    비록 사용 빈도는 낮지만
    메서드는 선언부 내부에서만 정의할 수 있는 것이다. 




[jsptest003_jsp.java]
/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.100
 * Generated at: 2025-08-13 05:37:47 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class jsptest003_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {


    // ○ 선언부 영역 → 함수 정의가 가능한 영역

    // 선언부에서 선언한 변수 a
    int a = 10;

    // 선언부에서 정의한 함수 sum()
    int sum(int x) {
        int s=0;
        for (int i=1; i<=x;i++) {
            s += i;
        }

        return s;
    }


  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(3);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메서드만을 허용합니다. Jasper는 OPTIONS 메서드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
                  null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

    // 스크립(트)릿(Scriptlet) 영역 -> JSP에서 JAVA 코드를 기술하는(사용하는) 영역

    // 스크립트릿에서 선언한 변수 b
    int b = 0;

    a++;
    b++;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>jsptest003.jsp</title>\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"css/main.css\">\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    <div>\r\n");
      out.write("        <h1>JSP 관찰하기</h1>\r\n");
      out.write("        <hr>\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("    <div>\r\n");
      out.write("        <h2>변수의 값 확인</h2>\r\n");
      out.write("        <h3>a : ");
      out.print(a );
      out.write("</h3>\r\n");
      out.write("        <h3>b : ");
      out.print(b );
      out.write("</h3>\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("    <div>\r\n");
      out.write("        <h2>함수의 기능확인</h2>\r\n");
      out.write("        <h3>");
      out.print(sum(100) );
      out.write("</h3>\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}

 -->

<!-- 
 -- ### --▣ --※ ○ ★ 『』 ? ▣ ◀▶ ▼ ▲ ⓐ ⓑ ① ② ③ ④ ⑤ ⑥ ⑦ ⑧ ⑨ ⑩  →   ←  ↓  …  ： º↑ /* */  ─ ┃ ┛┯ ┐┘ ￦
-->
</body>
</html>