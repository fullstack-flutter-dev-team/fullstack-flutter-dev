/*===================================================================
	■■■ 연산자(Operator) ■■■
		- 비트 단위 연산자 : 연산 속도가 빠른 장점
		- 두 변수에 담겨있는 내용(값) 바꾸기 → 스왑(swap)
			→ 『^(xor)』 연산자 활용
===================================================================*/



public class Test023
{
	public static void main(String[] args)
	{
		/*
		// 주요 변수 선언 및 초기화
		int x=20, y=23;	//-- 서로 다른 값이 있는 두 변수
		int temp;		//-- 임시 저장 변수
		
		// 담겨있는 내용물 확인
		System.out.printf("x → %d, y → %d\n", x, y);
		
		// 연산 및 처리
		temp = x;
		x = y;
		y = temp;
		
		
		// 결과 출력
		System.out.printf("x → %d, y → %d\n", x, y);
		//-- 실행 결과
		//x → 20, y → 23
		//x → 23, y → 20
		*/
		
		// 주요 변수 선언 및 초기화
		int x=20, y=23;	//-- 서로 다른 값이 있는 두 변수


		// 담겨있는 내용물 확인
		System.out.printf("x → %d, y → %d\n", x, y);

		// 연산 및 처리
		//x=x^y;
		//y=y^x;
		//x=x^y;
		
		y=y^x;
		x=x^y;
		y=y^x;
		
		// 결과 출력
		System.out.printf("x → %d, y → %d\n", x, y);
		//-- 결과 출력
		//x → 20, y → 23
		//x → 23, y → 20
		
		/*
		x = 20, y = 23
			↓
		//x=x^y;
		//y=y^x;
		//x=x^y;
		
		//x=x^y;	→ x=20^23
		
						00010100 → 20
					^	00010111 → 23
					------------------------
					    00000011 → 3	
						
					→ x = 2
		
		
		//y=y^x;	→ y=23^3;
						00010111 → 23
					^	00000011 → 3
					------------------------
					    00010100 → 20
						
					→ y = 20
		
		//x=x^y;	→ x=3^20
						00000011 →  3
					^	00010100 → 20
					------------------------
					    00010111 → 16 + 4 + 2 + 1 → 23
						
					→ x = 23
		
		
		*/
	}
}