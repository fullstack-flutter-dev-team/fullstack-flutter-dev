/*===================================================================
	■■■ 실행 흐름의 컨트롤(제어문) ■■■
		- 5장-03. 
			-반복문 실습 및 관찰
===================================================================*/

/*
	1부터 100까지의 정수 중에서
	짝수들의 합과 홀수들의 합을 따로 구분하여 계산한다.
	그리고, 결과값을 출력하는 프로그램을 구현한다.
	단, 반복문은 while문을 사용할 수 있도록 하며,
	조건 구문은 if 조건문을 사용하여 처리할 수 있도록 한다.
	
	실행 예)
	1부터 100까지의 정수 중
	짝수의 합 : xxx
	홀수의 합 : xxx
	계속하려면 아무 키나 누르세요...
*/

public class Test046
{
	public static void main(String[] args)
	{
		/*
		// 변수 선언 및 초기화
		int nFinalNum = 100;
		int nNum = 0, nEvenSum = 0, nOddSum = 0;
		
		// while 반복문
		while (nNum < nFinalNum)
		{
			// 숫자 값 갱신
			nNum += 1;
			
			// 변수 값 확인
			//System.out.println("nNum : " + nNum);
			
			if (nNum % 2 == 0)
			{
				// 짝수
				nEvenSum += nNum;
			} else {
				// 홀수
				nOddSum += nNum;
			}
			
		}
		
		// 결과 출력
		System.out.println("1부터 100까지의 정수 중");
		System.out.println("짝수의 합 : " + nEvenSum);
		System.out.println("홀수의 합 : " + nOddSum);
		
		//실행 결과
		// 1부터 100까지의 정수 중
		// 짝수의 합 : 2550
		// 홀수의 합 : 2500
		// 계속하려면 아무 키나 누르십시오 . . .
		*/
		
		
		// 주요 변수 선언 및 초기화
		int n = 1;		//-- 1부터 100까지 1씩 증가할 변수
		int even = 0;	//-- 짝수들의 누적합을 담아낼 변수
		int odd = 0;	//-- 홀수들의 누적합을 담아낼 변수
		
		// 연산 및 처리
		// 반복 연산  누적합 산출
		
		// ※ 반복 수행무은 pc의 리소스 소모가 크다는 것을 의미
		/*
		// 짝수들의 누적합을 얻어내는 반복문 구성
		while ()
		{ 
			
		}
		
		// 홀수들의 누적합을 얻어내는 반복문 구성
		while ()
		{
			
		}
		*/
		
		while (n <= 100)
		{
			if (n%2 == 0)		//-- n이 짝수일 경우
			{
				// even에 누적합 연산
				even += n;
			}
			else if (n%2 != 0)	//-- n이 홀수일 경우
			{
				// odd에 누적합 연산
				odd += n;
			}
			else
			{
				System.out.println("판별 불가 데이터~!!!");
				return;
			}
			
			n++;		//-- n을 1만큼씩 증가
		}
		
		// 결과 출력
		System.out.println("1부터 100까지의 정수 중");
		System.out.println("짝수의 합 : " + even);
		System.out.println("홀수의 합 : " + odd);
		//-- 실행결과
		// 1부터 100까지의 정수 중
		// 짝수의 합 : 2550
		// 홀수의 합 : 2500
		// 계속하려면 아무 키나 누르십시오 . . .
	}
}