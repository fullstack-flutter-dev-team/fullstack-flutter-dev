/*===================================================================
	■■■ 실행 흐름의 컨트롤(제어문) ■■■
		- 5장-03. 
			- 반복문(while문) 실습
===================================================================*/

/*
	1/2 + 2/3 + 3/4 + 5/6 + 6/7 + 7/8 + 8/9 + 9/10
	의 연산을 실수 기반으로 처리하여
	결과를 출력하는 프로그램을 구현한다.
	
	
	실행 예)
	연산 결과 : xxx
	계속하려면 아무 키나 누르세요....
	
	n → 1 ~ 9
	|
	1/2 + 2/3 + 3/4 + 5/6 + 6/7 + 7/8 + 8/9 + 9/10   →→ [누적 합 로직]
	  |
	  n+1
	  
	  n → 2 ~ 10
      |
	1/2 + 2/3 + 3/4 + 5/6 + 6/7 + 7/8 + 8/9 + 9/10
	|
	n-1
*/


public class Test050
{
	public static void main(String[] args)
	{
		/*
		// 변수 선언 및 초기화
		int nNum = 1;
		float fResult = 0.0f;
		
		
		// 연산
		while (nNum < 10)
		{
			//System.out.printf(">--1--> nNum: %d, fResult: %.2f\n",nNum, fResult);
			
			fResult += (float)nNum / ++nNum;
			
			//확인 
			//System.out.printf(">--2--> nNum: %d, fResult: %.2f\n",nNum, fResult);
		}
		
		
		// 결과 출력
		System.out.println("연산 결과 : " + fResult);
		//--실행결과
		//연산 결과 : 7.0710316
		//계속하려면 아무 키나 누르십시오 . . .		
		*/
		
		// 주요 변수 선언 및 초기화
		int n=0;		//-- 1부터 9까지 1씩 증가하게 될 변수
		double sum=0;	//-- 누적합을 담아낼 변수
						//--	→ 실수 기반 연산 → 실수 형태로 처리 (double?) 
		
		// 연산 및 처리
		while (n<9)		//-- n → 0	1	2	3	4	5	6	7	8
		{
			// 증감식 구성
			//-- 최종적으로 반복문의 조건을 무너뜨리는 열쇠가 되는 구문
			n++;		//-- n → 1	2	3	4	5	6	7	8	9
			
			// 누적합에 대한 연산
			sum += (double)n/(n+1);
			// 1/2 + 2/3 + 3/4 + 5/6 + 6/7 + 7/8 + 8/9 + 9/10
			// → 1.0/2 + 2.0/3 + ... + 9.0/10
			// 정수 기반 나눗셈 연산은 몫만 반환하기 때문에
			// 실수 기반 연산을 수행할 수 있도록 처리하기 위해서
			// 나눗셈 연산을 중심으로 피연산자 중 하나를 
			// 실수 형태로 만들어주는 과정
		}
		
		
		// 최종 결과 출력
		//System.out.println("연산 결과 : " + sum);
		//실행결과
		//연산 결과 : 7.071031746031746
		//계속하려면 아무 키나 누르십시오 . . .
		
		System.out.printf("연산 결과 : %f\n", sum);
		// 실행결과
		//연산 결과 : 7.071032
		//계속하려면 아무 키나 누르십시오 . . .
		
	}
}