/*===================================================================
	■■■ 실행 흐름의 컨트롤(제어문) ■■■
		- 5장-03. 
			- 반복문(for문) 실습
			- 반복문의 중첩 구문을 활용한 구구단 출력
===================================================================*/

/*
	실행 예)
	====[2단]====	====[3단]====	====[4단]====	====[5단]====
	 2 *  1 =  2
	 2 *  2 =  4
	 2 *  3 =  6
	 2 *  4 =  8
	 2 *  5 = 10
	 2 *  6 = 12
	 2 *  7 = 14
	 2 *  8 = 16
	 2 *  9 = 18  

	====[6단]====	====[7단]====	====[8단]====	====[9단]====

		계속하려면 아무 키나 누르세요...

	- 2중첩 * 2

	- 중첩 * 1
*/

public class Test064
{
	public static void main(String[] args)
	{
		/*
		// [2중첩 * 2]
		int i,j;
		
		for (i = 1; i <= 9; i++)
		{
			for (j = 2; j <=5 ; j++)
			{
				System.out.printf("%2d * %2d = %2d", j, i , (i*j));
			}
			//System.out.printf("%2d * %2d = %2d", i, j , (i*j));
			
			System.out.println();
		}
		
		System.out.println();
		
		for (i = 1; i <= 9; i++)
		{
			for (j = 6; j <=9 ; j++)
			{
				System.out.printf("%2d * %2d = %2d", j, i , (i*j));
			}
			//System.out.printf("%2d * %2d = %2d", i, j , (i*j));
			
			System.out.println();
		}
		*/
		
		
		/*
		// [3중첩 * 1]
		// 변수 선언
		int i, j, k;
		
		for (i = 1; i <= 2; i++)
		{
			for (j = 1; j <= 9; j++)
			{
				for (k = i*4-2; k <= i*4+1; k++)
				{
					System.out.printf("%2d * %2d = %2d", k, j, (k*j));
				}
				
				System.out.println();
			}
			
			System.out.println();
		}
		*/
		
		//(1) Test063 클래스와 비교하여
		//	출력 방향(순서)이 다르기 때문에
		//	반복문의 제어 흐름도 달라져야 한다.
		//	(콜솔 기반의 출력 환경이기 때문에...)
		//	
		//(2) (1)에 따라...
		//	단과 곱해지는 수의 위치가
		//	달라진 상태에서의 반복문 구성
		
		/*
		//-- [2중첩 * 2]
		// 첫 번째 문단
		for (int i = 1; i <= 9; i++)		// 웅~~		→ 곱해지는 수
		{
			for (int j = 2; j <= 5; j++)	// 쑝숑쑝	→ 단
			{
				// 테스트(확인)
				System.out.printf("%2d * %2d = %2d ", j, i, (j*i));
			}
			
			System.out.println();			// 개행
		}
		
		System.out.println();			// 개행	→	문단과 문다 사이의 추가 개행
			
		// 두 번째 문단
		for (int i = 1; i <= 9; i++)		// 웅~~		→ 곱해지는 수
		{
			for (int j = 6; j <= 9; j++)	// 쑝숑쑝	→ 단
			{
				// 테스트(확인)
				System.out.printf("%2d * %2d = %2d ", j, i, (j*i));
			}
			
			System.out.println();			// 개행
		}
		*/
		
		//(3) 위에서 처리한 결과를 
		//		두 문단으로 반복하는 반복문 구성
		//	(두 번 반복하는 반복문에 위의 결과의 일부를 삽입)
		//	
		
		// 문단 구성
		/*
		for (int h=0; h <= 1; h++)			// h	→	0	1
		{
			// 테스트(확인)
			System.out.println("테스트 " + h);
			for (int i=1; i <= 9; i++)
			{
				for (int j = 2; j <= 5; j++)
				{
					System.out.printf("%4d * %d = %2d", j, i, (j*i));
					System.out.printf("[%d] ", h);
				}
				System.out.println();
			}
			System.out.println();
		}
		*/
		
		//(4) 같은 구문을
		//		두 개의 문단으로 나누어 처리하는 과정에서
		//		문단에따라 다르게 주어지는 환경(h의 값)을 활용하는 방법으로
		//		반복문 3중첩 구성
		//	
		
		/*
		// 문단 구성
		for (int h=0; h <=1; h++)
		{
			// 테스트(확인)
			//System.out.println("테스트 " + h);
			for (int i=1; i <=9; i++)
			{
				for (int j=2; j<=5; j++)
				{
					System.out.printf("%4d * %d = %2d", j+(h*4), i,((j+(h*4)*i)); 
				}
				System.out.println();
			}
				System.out.println();
		}
		*/
		
		// cf) 그냥 다른 구조...
		int a, b, c;
		for (a=2; a<=6; a +=4)				//-- a →	2					6
		{
			for (b=1; b <=9; b++)			//-- b →	1	2	3	4	5	6	7	8
			{
				for (c=a; c<=(a+3); c++)	//-- c →	2	3	4	5		6	7	8	9
				{
					System.out.printf("%4d * %d = %2d", c, b, (c*b));
				}
				
				System.out.println();
			}
			System.out.println();
		}
	}
}

//--실행결과
/*
 2 *  1 =  2 3 *  1 =  3 4 *  1 =  4 5 *  1 =  5
 2 *  2 =  4 3 *  2 =  6 4 *  2 =  8 5 *  2 = 10
 2 *  3 =  6 3 *  3 =  9 4 *  3 = 12 5 *  3 = 15
 2 *  4 =  8 3 *  4 = 12 4 *  4 = 16 5 *  4 = 20
 2 *  5 = 10 3 *  5 = 15 4 *  5 = 20 5 *  5 = 25
 2 *  6 = 12 3 *  6 = 18 4 *  6 = 24 5 *  6 = 30
 2 *  7 = 14 3 *  7 = 21 4 *  7 = 28 5 *  7 = 35
 2 *  8 = 16 3 *  8 = 24 4 *  8 = 32 5 *  8 = 40
 2 *  9 = 18 3 *  9 = 27 4 *  9 = 36 5 *  9 = 45

 6 *  1 =  6 7 *  1 =  7 8 *  1 =  8 9 *  1 =  9
 6 *  2 = 12 7 *  2 = 14 8 *  2 = 16 9 *  2 = 18
 6 *  3 = 18 7 *  3 = 21 8 *  3 = 24 9 *  3 = 27
 6 *  4 = 24 7 *  4 = 28 8 *  4 = 32 9 *  4 = 36
 6 *  5 = 30 7 *  5 = 35 8 *  5 = 40 9 *  5 = 45
 6 *  6 = 36 7 *  6 = 42 8 *  6 = 48 9 *  6 = 54
 6 *  7 = 42 7 *  7 = 49 8 *  7 = 56 9 *  7 = 63
 6 *  8 = 48 7 *  8 = 56 8 *  8 = 64 9 *  8 = 72
 6 *  9 = 54 7 *  9 = 63 8 *  9 = 72 9 *  9 = 81

계속하려면 아무 키나 누르십시오 . . .
*/